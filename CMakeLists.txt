cmake_minimum_required(VERSION 3.7)
#include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/switch/Switch.cmake)
project(Breakout-SDL2 VERSION 0.1.0)
set(CMAKE_BINARY_DIR ${CMAKE_CURRENT_LIST_DIR}/build/Breakout-SDL2/${CMAKE_BUILD_TYPE})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/build/Breakout-SDL2/${CMAKE_BUILD_TYPE})
set(CMAKE_CXX_STANDARD 17)
if(WIN32)
    message(STATUS "Is Windows compiler")
    SET(SDL2_DIR libs/SDL2)
    find_package(SDL2 REQUIRED)
    set(SDL2_IMAGE_LIBRARY ${CMAKE_CURRENT_LIST_DIR}/libs/SDL2_image/lib/x64)
    set(SDL2_TTF_LIBRARY ${CMAKE_CURRENT_LIST_DIR}/libs/SDL2_ttf/lib)
    set(SDL2_MIXER_LIBRARY ${CMAKE_CURRENT_LIST_DIR}/libs/SDL2_mixer/lib)
ENDIF()

if(UNIX)
    message(STATUS "Is Unix compiler")
    list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/sdl2)
    list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/lua)
    find_package(SDL2 REQUIRED)
    find_package(SDL2_image REQUIRED)
    find_package(SDL2_ttf REQUIRED)
    find_package(SDL2_mixer REQUIRED)
    #find_package(Lua REQUIRED)
    set(LUA_LIBRARIES -llua)
ENDIF()

# if(${SWITCH})
#     message(STATUS "Is switch compiler")
#     list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/sdl2)
#     find_package(SDL2 CONFIG REQUIRED)
#     #find_package(SDL2_image REQUIRED)
# ENDIF()

message(STATUS ${SDL2_INCLUDE_DIRS})

include_directories(${SDL2_INCLUDE_DIRS} ${SDL2_IMAGE_INCLUDE_DIRS})
include_directories(include)
include_directories(src/engine)

file(GLOB ENGINE_FILES src/engine/*.cpp src/engine/*/*.cpp src/engine/*/*/*.cpp )

add_library(LightCanvasCpp STATIC ${ENGINE_FILES})

file(GLOB SRC_FILES src/*.cpp src/game/*.cpp src/game/*/*.cpp src/game/*/*/*.cpp)
add_executable(Breakout-SDL2 ${SRC_FILES})

if(WIN32)

    target_link_libraries(LightCanvasCpp ${SDL2_LIBRARY})
    target_link_libraries(LightCanvasCpp ${SDL2_IMAGE_LIBRARY}/SDL2_image.lib)
    target_link_libraries(LightCanvasCpp ${SDL2_TTF_LIBRARY}/SDL2_ttf.lib)
    target_link_libraries(LightCanvasCpp ${SDL2_MIXER_LIBRARY}/SDL2_mixer.lib)
    target_link_libraries(LightCanvasCpp ${CMAKE_CURRENT_LIST_DIR}/libs/lua/liblua54.a)

    target_link_libraries(Breakout-SDL2 ${CMAKE_CURRENT_LIST_DIR}/libs/lua/liblua54.a)
    target_link_libraries(Breakout-SDL2 ${SDL2_LIBRARY})
    target_link_libraries(Breakout-SDL2 ${SDL2_IMAGE_LIBRARY}/SDL2_image.lib)
    target_link_libraries(Breakout-SDL2 ${SDL2_TTF_LIBRARY}/SDL2_ttf.lib)
    target_link_libraries(Breakout-SDL2 ${SDL2_MIXER_LIBRARY}/SDL2_mixer.lib)
    file(COPY ${SDL2_DIR}/lib/x64/SDL2.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_IMAGE_LIBRARY}/SDL2_image.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_IMAGE_LIBRARY}/libjpeg-9.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_IMAGE_LIBRARY}/libpng16-16.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_IMAGE_LIBRARY}/zlib1.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_IMAGE_LIBRARY}/libtiff-5.dll DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_TTF_LIBRARY}/ DESTINATION ${CMAKE_BINARY_DIR})
    file(COPY ${SDL2_MIXER_LIBRARY}/ DESTINATION ${CMAKE_BINARY_DIR})
ENDIF()
if(UNIX)

    target_link_libraries(LightCanvasCpp ${SDL2_LIBRARY})
    target_link_libraries(LightCanvasCpp ${SDL2_IMAGE_LIBRARY})
    target_link_libraries(LightCanvasCpp ${SDL2_TTF_LIBRARY})
    target_link_libraries(LightCanvasCpp ${SDL2_MIXER_LIBRARY})
    target_link_libraries(LightCanvasCpp lua)
    target_link_libraries(LightCanvasCpp dl)

    target_link_libraries(Breakout-SDL2 lua)
    target_link_libraries(LightCanvasCpp dl)
    target_link_libraries(Breakout-SDL2 ${SDL2_LIBRARY})
    target_link_libraries(Breakout-SDL2 ${SDL2_IMAGE_LIBRARY})
    target_link_libraries(Breakout-SDL2 ${SDL2_TTF_LIBRARY})
    target_link_libraries(Breakout-SDL2 ${SDL2_MIXER_LIBRARY})
ENDIF()

target_link_libraries(Breakout-SDL2 LightCanvasCpp)
if(${SWITCH})
        target_link_libraries(Breakout-SDL2 ${SDL2_LIBRARIES})        
        target_link_libraries(Breakout-SDL2 -lSDL2 -lSDL2_ttf -lSDL2_image -lSDL2_mixer -lpng -lwebp -lz -ljpeg -lglad -lEGL -lglapi -ldrm_nouveau -lnx)
ENDIF()
        
file(COPY resources DESTINATION ${CMAKE_BINARY_DIR})